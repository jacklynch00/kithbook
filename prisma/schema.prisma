// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth required models
model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  Boolean         @default(false)
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sessions       Session[]
  accounts       Account[]
  emails         Email[]
  calendarEvents CalendarEvent[]
  contacts       Contact[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

// Email sync models
model Email {
  id          String   @id @default(cuid())
  googleId    String   @unique // Gmail message ID
  threadId    String? // Gmail thread ID
  subject     String?
  fromEmail   String?
  fromName    String?
  toEmails    String? // JSON array of recipients
  body        String? // Email body/snippet
  isRead      Boolean  @default(false)
  isImportant Boolean  @default(false)
  labels      String? // JSON array of Gmail labels
  receivedAt  DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, receivedAt])
  @@map("email")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  googleId    String   @unique // Google Calendar event ID
  title       String?
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean  @default(false)
  status      String? // confirmed, tentative, cancelled
  attendees   String? // JSON array of attendees
  organizer   String? // Organizer email
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, startTime])
  @@map("calendar_event")
}

// Contact management
model Contact {
  id                String    @id @default(cuid())
  email             String // Contact's email (primary identifier)
  name              String? // Most complete name found
  lastInteractionAt DateTime // Last email or calendar interaction
  interactionCount  Int       @default(1) // Total interactions (emails + calendar events)
  archived          Boolean   @default(false) // Whether contact is archived
  archivedAt        DateTime? // When contact was archived
  userId            String // User who this contact belongs to
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, email]) // Unique contact per user per email
  @@index([userId, lastInteractionAt])
  @@index([userId, email])
  @@index([userId, archived]) // Index for filtering archived contacts
  @@map("contact")
}
